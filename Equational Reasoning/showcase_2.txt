let rec fold_right f l acc =
  match l with [] -> acc | h :: t -> f h (fold_right f t acc)


let rec map f l =
  match l with [] -> [] | h :: t -> f h :: map f t



To prove: 
    fold_right (fun e a -> g e :: a) l []   =   map g l




Generalized statement (*) (if necessary): <...>
---
Base Case:
Statement being proven in base case: fold_right (fun e a -> g e :: a) [] []   =   map g []
Proof of base case:

            fold_right (fun e a -> g e :: a) [] [] 
(fold_right)= match [] with [] -> [] | h :: t -> (fun e a -> g e :: a) h (fold_right (fun e a -> g e :: a) t [])
(match)     = []


(match)     = []
(map)       = match [] with [] -> [] | h :: t -> g h :: map g t
            = map g []





---
Inductive Step:
Induction hypothesis (or hypotheses): fold_right (fun e a -> g e :: a) l []   =   map g l
Statement being proved in inductive step: fold_right (fun e a -> g e :: a) (x :: xs) []   =   map g (x :: xs)
Proof of inductive step:

                fold_right (fun e a -> g e :: a) (x :: xs) []
(fold_right)    = match (x :: xs) with [] -> [] | h :: t -> (fun e a -> g e :: a) h (fold_right (fun e a -> g e :: a) t [])
(match)         = (fun e a -> g e :: a) x (fold_right (fun e a -> g e :: a) xs [])
(fun)           = g x :: (fold_right (fun e a -> g e :: a) xs [])

(I.H.)          = g x :: (fold_right (fun e a -> g e :: a) xs [])
(match)         = g x :: map g xs
(map)           = match (x :: xs) with [] -> [] | h :: t -> g h :: map g t
                = map g (x :: xs)

---
Instantiation of generalization (if necessary):
<...>
---
QED
